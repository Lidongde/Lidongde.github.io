<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单片机单个按键扫描方法-进阶</title>
      <link href="/post/8051-stc89c52-SingleKey-advanced.html"/>
      <url>/post/8051-stc89c52-SingleKey-advanced.html</url>
      
        <content type="html"><![CDATA[<p>单个按键扫描方法的进阶！大致可以分为两种思路，一个是使用标志位，另外一种从借助“前后状态的变化与否”入手。</p><a id="more"></a><h2 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h2><p>分别使用两个变量存储“按键动作”的前后状态，通过比较二者的差异判断按键的状态。核心代码如下，以按下S4为例：</p><pre><code>uchar key_now = 1;  //用处存储按键本次的状态（0表示按下，1表示未按下）uchar key_flag = 0; //按键是否按下的标志（0表示按键未被按下，1表示按键被按下）uchar key_old = 1; //用于存储按键上次的状态（0表示上次按下，1表示上次未按下）sbit s4 = P3^3;void key_scan(){    key_now = s4;    key_flag = (key_now ^ key_old) ^ key_flag; //^表示异或    key_old = key_now;}</code></pre><blockquote><p>异或：相同出0，不同出1；和0异或表示保持不变，和1异或表示取反操作。</p></blockquote><p>在具体的项目中，我们只需要判断key_flag是否长时间为“1”，即可判断按键是否按下。此法的优点在于没有使用延时函数，而是将计算key_flag = 1的次数等效为”一段延时的时长“，在计数过程中程序可以进行其他的处理，不会停滞在delay函数中。</p><h2 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h2><p>一次按键时长至少在ms级别，而12T的stc89c52的单个指令周期为10^-6数量级，因此可以猜测按下一个键之后mcu可能跑了几个main函数中的while大循环，若每一次循环时key_flag为1的次数加1，该次数在总次数中占比达到一定程度便可认定按键有效！</p><h2 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h2><p>核心代码如下，以按下S4为例：</p><pre><code>sbit s4 = P3^3;uchar key_flag = 0;   //首先定义按键的标志位，并初始化为0void key_scan(){    if((s4 == 0) &amp;&amp; (!key_flag))                //如果有键按下，则条件成立（有键按下，则s4为0；而 !key_flag为1）    {        delay10ms();                            //延时消抖        key_flag = 1;                           //把标志位置为1        if(s4 == 0)                             //如果确定有键按下        {                                  dspbuf[0]++;                        //进行事件处理（数码管显示值加1）        }    }    else if(s4 != 0)                            //未按下按键    {        key_flag = 0;    }}</code></pre><p>其中：代码“key_flag = 1”的作用是：下次即便按键没有松手，程序跑完一圈之后，也不会再满足if（（s4 == 0） &amp;&amp; （!key_flag））的条件；同样，亦不会满足else if（s4 != 0）的条件，那么key_flag 不会被赋为0。综合以上情况，一次按键只会进行一次处理。当按键被释放后，以后的扫描则会满足else if（s4 != 0）的条件，那么key_flag 会被赋为0，则可以进行接下来的按键扫描了，如此反复……</p><p><strong>这样的按键处理，让程序减少了while的松手检测</strong>，这对于程序是十分有利的。试想，单片机有那么多的程序要处理，但是却因为按键而卡在一个地方，这确实有点得不偿失了。</p>]]></content>
      
      
      <categories>
          
          <category> mcu-51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc89c52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机矩阵键盘的两种实现</title>
      <link href="/post/8051-stc89c52-MatrixKey.html"/>
      <url>/post/8051-stc89c52-MatrixKey.html</url>
      
        <content type="html"><![CDATA[<p>这里仅涉及从单个按键到矩阵键盘的实现过程，至于按键的扫描方式的优化和分析请参考“单个按键”的部分！</p><a id="more"></a><p><a href="https://blog.csdn.net/xiaocheng_sky/article/details/52133639" target="_blank" rel="noopener">原文链接在这里</a>，<a href="https://www.cnblogs.com/hughdong/p/6879891.html" target="_blank" rel="noopener">还有这里</a>，下面进入正题。</p><h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><p>行列扫描法，行扫描和列扫描之后会得到一个8bit但仅有4bit有效数值的端口数据。当检测到按键被按下时，将此时行扫描的结果存入临时变量，再进行列扫描，得到的结果和临时变量进行或运算，得到的结果就是相应按键的二进制数据了。之后再根据自己的硬件连接转换一下就行。</p><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3><p>也属于行列扫描法，不过具体的代码思路不同。具体见如下的代码：</p><pre><code>void matrixKeyScan(){    P3 = 0x0f;         temp = P3;//用一个变量存储P3口的状态，以免外界影响P3口，从而造成扫描有误    if(temp != 0x0f)    {        delay10ms();        if(temp!= 0x0f)                             //确定有键按下        {                   switch(temp)                            //查看P3（temp）的状态            {                case 0x0e :key_value = 1; break;    //按下的为第一行                case 0x0d :key_value = 5; break;                    case 0x0b :key_value = 9; break;                    case 0x07 :key_value = 13;break;    //按下的为第四行            }           }           P3 = 0xf0;//再将 P3 口重新赋值，高四位为1，第四位为0        temp = P3;        if(temp != 0xf0)        {            switch(temp)            {                case 0xe0 : key_value +=3 ; break;   //按下的是第四列,键值key_value加3                case 0xd0 : key_value +=2 ; break;                case 0xb0 : key_value +=1 ; break;                case 0x70 : key_value +=0 ; break;   //按下的是第一列，键值key_value加0            }        }        while(P3 != 0xf0);//松手检测，因为最近的一次赋值是P3 = 0xf0    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> mcu-51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc89c52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单片机单个按键扫描</title>
      <link href="/post/8051-stc89c52-SingleKey.html"/>
      <url>/post/8051-stc89c52-SingleKey.html</url>
      
        <content type="html"><![CDATA[<p>一种最为简单的识别方式，用延时函数实现消抖处理，使用while死循环实现按键结束的判断！存在逻辑上的bug，不建议在实际项目中使用。</p><a id="more"></a><p>首先上链接！<a href="https://blog.csdn.net/xiaocheng_sky/article/details/52124568" target="_blank" rel="noopener">这是源文章的来源。</a> <a href="https://blog.csdn.net/fanyuqa/article/details/48036529" target="_blank" rel="noopener">按照这篇文章的思路</a>，对键盘的响应取决于键盘的工作方式，键盘的工作方式应根据实际应用系统中的CPU的工作状况而定，其选取的原则是既要保证CPU能及时响应按键操作，又不要过多占用CPU的工作时间。通常键盘的工作方式有三种，编程扫描、定时扫描和中断扫描。</p><pre><code>（1）编程扫描方式编程扫描方式是利用CPU完成其它工作的空余时间，调用键盘扫描子程序来响应键盘输入的要求。在执行键功能程序时，CPU不再响应键输入要求，直到CPU重新扫描键盘为止。（2）定时扫描方式定时扫描方式就是每隔一段时间对键盘扫描一次，它利用单片机内部的定时器产生一定时间（例如10ms）的定时，当定时时间到就产生定时器溢出中断。CPU响应中断后对键盘进行扫描，并在有按键按下时识别出该键，再执行该键的功能程序。（3）中断扫描方式上述两种键盘扫描方式，无论是否按键，CPU都要定时扫描键盘，而单片机应用系统工作时，并非经常需要键盘输入，因此，CPU经常处于空扫描状态。为提高CPU工作效率，可采用中断扫描工作方式。其工作过程如下：当无按键按下时，CPU处理自己的工作，当有按键按下时，产生中断请求，CPU转去执行键盘扫描子程序，并识别键号。</code></pre><p><strong>本篇文章以及后续的篇章都归属于第一类！</strong> 下面进入正题。</p><pre><code>sbit s4 = P3^3;      //单独使用一个I/O口，需要使用sbit进行位定义void main(){    while(1)    {        if(s4 == 0)         //检测是否有键按下        {            delay10ms();     //10ms延时函数进行消抖            if(s4 == 0)            {                dspbuf[0]++;                while(!s4);  //等待按键松开            }        }        display();    }}</code></pre><h1 id="Warning"><a href="#Warning" class="headerlink" title="Warning:"></a><strong>Warning:</strong></h1><blockquote><p>在等待按键松开的过程中，如果按键长时间按下，程序会卡死在while(!s4)这一行。</p></blockquote><p><strong>解决方法：</strong> 1，改变按键的扫描方式！2，将功能实现代码放入到中断中去，例如这里的display函数。</p>]]></content>
      
      
      <categories>
          
          <category> mcu-51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stc89c52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经验-f12的妙用</title>
      <link href="/post/f12-an-useful-key.html"/>
      <url>/post/f12-an-useful-key.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://jingyan.baidu.com/article/0964eca24e159c8285f53618.html" target="_blank" rel="noopener">本文链接</a>！ 文章来源于百度经验，经验这个网站有些时候还是很有作用的，客观来讲baidu在某些场合不错的。</p><a id="more"></a><ol class="exp-conent-orderlist"><li class="exp-content-list list-item-1"><div class="list-icon" style="visibility: hidden;">1</div><div class="content-list-text"><p>首先,在自己喜欢的博客页面,点击鼠标右键,看到如下图片,点击检查.</p></div><div class="content-list-media"><div class="content-list-image clearfix"><a class="exp-image-wraper" href="http://jingyan.baidu.com/album/0964eca24e159c8285f53618.html?picindex=1" log="type:20150831,pos:enter_step" target="_self"><img class="exp-image-default" alt="如何csdn复制他人博客文章到自己博客下" src="https://imgsa.baidu.com/exp/w=500/sign=8f71614aa451f3dec3b2b964a4eff0ec/314e251f95cad1c8b5e155a7743e6709c83d51d3.jpg" style><span class="exp-album-enter-mask"></span><span class="enter-step-btn">步骤阅读</span></a></div></div></li><li class="exp-content-list list-item-2"><div class="list-icon" style="visibility: hidden;">2</div><div class="content-list-text"><p>然后,在右边的源码里边,找到”article_content”标签头,可以看到左侧部分的预览界面被选中的部分就是要复制粘贴文章(包括html部分),检查左侧被选中的部分是否是自己想要的部分.</p></div><div class="content-list-media"><div class="content-list-image clearfix"><a class="exp-image-wraper" href="http://jingyan.baidu.com/album/0964eca24e159c8285f53618.html?picindex=2" log="type:20150831,pos:enter_step" target="_self"><img class="exp-image-default" alt="如何csdn复制他人博客文章到自己博客下" src="https://imgsa.baidu.com/exp/w=500/sign=33aab39eb2389b5038ffe052b534e5f1/cdbf6c81800a19d8b9452d8538fa828ba71e46ef.jpg" style><span class="exp-album-enter-mask"></span><span class="enter-step-btn">步骤阅读</span></a></div></div></li><li class="exp-content-list list-item-3"><div class="list-icon" style="visibility: visible;">3</div><div class="content-list-text"><p>之后,再右键选择该标签(“article_content”),如下图,选择Copy element复制(或者Cut element 剪切)该标签下的所有元素</p></div><div class="content-list-media"><div class="content-list-image clearfix"><a class="exp-image-wraper" href="http://jingyan.baidu.com/album/0964eca24e159c8285f53618.html?picindex=3" log="type:20150831,pos:enter_step" target="_self"><img class="exp-image-default" alt="如何csdn复制他人博客文章到自己博客下" src="https://imgsa.baidu.com/exp/w=500/sign=f4cadcaed91b0ef46ce8985eedc551a1/78310a55b319ebc4e74de2198926cffc1e17167c.jpg" style><span class="exp-album-enter-mask"></span><span class="enter-step-btn">步骤阅读</span></a></div></div></li><li class="exp-content-list list-item-4"><div class="list-icon" style="visibility: visible;">4</div><div class="content-list-text"><p>最后,在自己博客的下”MarkDown编辑器”粘贴即可完全复制别人的博客</p></div><div class="content-list-media"><div class="content-list-image clearfix"><a class="exp-image-wraper" href="http://jingyan.baidu.com/album/0964eca24e159c8285f53618.html?picindex=4" log="type:20150831,pos:enter_step" target="_self"><img class="exp-image-default" alt="如何csdn复制他人博客文章到自己博客下" src="https://imgsa.baidu.com/exp/w=500/sign=4d151bb96063f6241c5d3903b745eb32/a044ad345982b2b76fa8a9443aadcbef76099b7f.jpg" style><span class="exp-album-enter-mask"></span><span class="enter-step-btn">步骤阅读</span></a></div></div></li><li class="exp-content-list list-item-5"><div class="list-icon" style="visibility: visible;">5</div><div class="content-list-text"><p>最后结果显示</p></div><div class="content-list-media"><div class="content-list-image clearfix"><a class="exp-image-wraper" href="http://jingyan.baidu.com/album/0964eca24e159c8285f53618.html?picindex=5" log="type:20150831,pos:enter_step" target="_self"><img class="exp-image-default" alt="如何csdn复制他人博客文章到自己博客下" src="https://imgsa.baidu.com/exp/w=500/sign=c5fa75a378f082022d92913f7bfafb8a/a08b87d6277f9e2f6fb98c881430e924b999f3a6.jpg" style><span class="exp-album-enter-mask"></span><span class="enter-step-btn">步骤阅读</span></a></div></div><div class="last-item"><span class="last-item-end">END</span></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页文章搬运 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转-小程序实现原理</title>
      <link href="/post/null.html"/>
      <url>/post/null.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiangzhihong8/article/details/66521459" target="_blank" rel="noopener">原文链接</a>！ 因为课程作业的需要，选择了“微信小程序的原理与设计”这个题目，不多说了，开干吧！</p><a id="more"></a><p>作为一名前端开发，如果你还停留在应用开发层面，那你就OUT了，快来跟我一起探讨下小程序框架本身底层实现的一些技术细节吧，让我们从小程序的运行机制来深度了解小程序。 <br><br>小程序是基于WEB规范，采用HTML,CSS和JS等搭建的一套框架，微信官方给它们取了一个很牛逼的名字：WXML,WXSS，但本质上还是在整个WEB体系之下构建的。 <br><br>WXML，个人猜测在取这个名字的是微信的Xml，说到底就是xml的一个子集。WXML采用微信自定义的少量标签WXSS，大家可以理解为就是自定义的CSS。实现逻辑部分的JS还是通用的ES规范，并且runtime还是Webview（IOS WKWEBVIEW, ANDROID X5）。</p><p></p><h1 id="小程序"><a name="t1"></a>小程序</h1><h2 id="小程序目录结构"><a name="t2"></a>小程序目录结构</h2><p><img src="https://img-blog.csdn.net/20170326213559847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title></p><p>一个完整的小程序主要由以下几部分组成： <br><br>一个入口文件：app.js <br><br>一个全局样式：app.wxss <br><br>一个全局配置：app.json <br><br>页面：pages下，每个页面再按文件夹划分，每个页面4个文件 <br><br>视图：wxml，wxss  <br><br>逻辑：js，json（页面配置，不是必须）</p><p>注：pages里面还可以再根据模块划分子目录，孙子目录，只需要在app.json里注册时填写路径就行。</p><h2 id="小程序打包"><a name="t3"></a>小程序打包</h2><p>开发完成后，我们就可以通过这里可视化的按钮，点击直接打包上传发布，审核通过后用户就可以搜索到了。 <br><br><img src="https://img-blog.csdn.net/20170326213924614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title></p><p>那么打包怎么实现的呢？ <br><br>这就涉及到这个编辑器的实现原理和方式了，它本身也是基于WEB技术体系实现的，nwjs+react，nwjs是什么：简单是说就是node+webkit，node提供给我们本地api能力，而webkit提供给我们web能力，两者结合就能让我们使用JS+HTML实现本地应用程序。 <br><br>既然有nodejs，那上面的打包选项里的功能就好实现了。 <br><br>ES6转ES5：引入babel-core的node包 <br><br>CSS补全：引入postcss和autoprefixer的node包（postcss和autoprefixer的原理看这里） <br><br>代码压缩：引入uglifyjs的node包</p><p>注：在android上使用的x5内核，对ES6的支持不好，要兼容的话，要么使用ES5的语法或者引入babel-polyfill兼容库。</p><h2 id="打包后的目录结构"><a name="t4"></a>打包后的目录结构</h2><p>小程序打包后的结构如下： <br><br><img src="https://img-blog.csdn.net/20170326214333007?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title></p><p>所有的小程序基本都最后都被打成上面的结构 <br><br>1、WAService.js  框架JS库，提供逻辑层基础的API能力 <br><br>2、WAWebview.js 框架JS库，提供视图层基础的API能力 <br><br>3、WAConsole.js 框架JS库，控制台 <br><br>4、app-config.js 小程序完整的配置，包含我们通过app.json里的所有配置，综合了默认配置型 <br><br>5、app-service.js 我们自己的JS代码，全部打包到这个文件 <br><br>6、page-frame.html 小程序视图的模板文件，所有的页面都使用此加载渲染，且所有的WXML都拆解为JS实现打包到这里 <br><br>7、pages 所有的页面，这个不是我们之前的wxml文件了，主要是处理WXSS转换，使用js插入到header区域。</p><h1 id="小程序架构"><a name="t5"></a>小程序架构</h1><p>微信小程序的框架包含两部分View视图层、App Service逻辑层，View层用来渲染页面结构，AppService层用来逻辑处理、数据请求、接口调用，它们在两个进程（两个Webview）里运行。 <br><br>视图层和逻辑层通过系统层的JSBridage进行通信，逻辑层把数据变化通知到视图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。</p><p>小程序架构图： <br><br><img src="https://img-blog.csdn.net/20170326215724891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title></p><p>小程序启动时会从CDN下载小程序的完整包，一般是数字命名的,如：_-2082693788_4.wxapkg</p><h2 id="小程序技术实现"><a name="t6"></a>小程序技术实现</h2><p>小程序的UI视图和逻辑处理是用多个webview实现的，逻辑处理的JS代码全部加载到一个Webview里面，称之为AppService，整个小程序只有一个，并且整个生命周期常驻内存，而所有的视图（wxml和wxss）都是单独的Webview来承载，称之为AppView。所以一个小程序打开至少就会有2个webview进程，正式因为每个视图都是一个独立的webview进程，考虑到性能消耗，小程序不允许打开超过5个层级的页面，当然同是也是为了体验更好。</p><h3 id="appservice"><a name="t7"></a>AppService</h3><p>可以理解AppService即一个简单的页面，主要功能是负责逻辑处理部分的执行，底层提供一个WAService.js的文件来提供各种api接口，主要是以下几个部分： <br><br>消息通信封装为WeixinJSBridge（开发环境为window.postMessage, IOS下为WKWebview的window.webkit.messageHandlers.invokeHandler.postMessage，android下用WeixinJSCore.invokeHandler）</p><p>1、日志组件Reporter封装 <br><br>2、wx对象下面的api方法 <br><br>3、全局的App,Page,getApp,getCurrentPages等全局方法 <br><br>4、还有就是对AMD模块规范的实现</p><p>然后整个页面就是加载一堆JS文件，包括小程序配置config，上面的WAService.js（调试模式下有asdebug.js），剩下就是我们自己写的全部的js文件，一次性都加载。</p><h3 id="在开发环境下"><a name="t8"></a>在开发环境下</h3><p>1、页面模板：app.nw/app/dist/weapp/tpl/appserviceTpl.js <br><br>2、配置信息，是直接写入一个js变量，__wxConfig。 <br><br>3，其他配置 <br><br><img src="https://img-blog.csdn.net/20170326220419423?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title></p><h3 id="线上环境"><a name="t9"></a>线上环境</h3><p>而在上线后是应用部分会打包为2个文件，名称app-config.json和app-service.js，然后微信会打开webview去加载。线上部分应该是微信自身提供了相应的模板文件，在压缩包里没有找到。 <br><br>1、WAService.js（底层支持） <br><br>2、app-config.json（应用配置） <br><br>3、app-service.js（应用逻辑）</p><p>然后运行在JavaScriptCore引擎里面。</p><h3 id="appview"><a name="t10"></a>AppView</h3><p>这里可以理解为h5的页面，提供UI渲染，底层提供一个WAWebview.js来提供底层的功能,具体如下： <br><br>1、消息通信封装为WeixinJSBridge（开发环境为window.postMessage, IOS下为WKWebview的window.webkit.messageHandlers.invokeHandler.postMessage，android下用WeixinJSCore.invokeHandler） <br><br>2、日志组件Reporter封装 <br><br>3、wx对象下的api，这里的api跟WAService里的还不太一样，有几个跟那边功能差不多，但是大部分都是处理UI显示相关的方法 <br><br>4、小程序组件实现和注册 <br><br>5、VirtualDOM，Diff和Render UI实现 <br><br>6、页面事件触发</p><p>在此基础上，AppView有一个html模板文件，通过这个模板文件加载具体的页面，这个模板主要就一个方法，$gwx，主要是返回指定page的VirtualDOM，而在打包的时候，会事先把所有页面的WXML转换为ViirtualDOM放到模板文件里，而微信自己写了2个工具wcc（把WXML转换为VirtualDOM）和wcsc（把WXSS转换为一个JS字符串的形式通过style标签append到header里）。</p><h3 id="service和view通信"><a name="t11"></a>Service和View通信</h3><p>使用消息publish和subscribe机制实现两个Webview之间的通信，实现方式就是统一封装一个WeixinJSBridge对象，而不同的环境封装的接口不一样，具体实现的技术如下：</p><h4 id="windows环境">windows环境</h4><p>通过window.postMessage实现（使用chrome扩展的接口注入一个contentScript.js，它封装了postMessage方法，实现webview之间的通信，并且也它通过chrome.runtime.connect方式，也提供了直接操作chrome native原生方法的接口） <br><br>发送消息：window.postMessage(data, ‘*’);，// data里指定 webviewID <br><br>接收消息：window.addEventListener(‘message’, messageHandler); // 消息处理并分发，同样支持调用nwjs的原生能力。 <br><br>在contentScript里面看到一句话，证实了appservice也是通过一个webview实现的，实现原理上跟view一样，只是处理的业务逻辑不一样。</p><pre class="prettyprint" name="code"><code class="hljs livecodeserver has-numbering" onclick="mdcp.signin(event)"><span class="hljs-string">'webframe'</span> === b ? postMessageToWebPage(<span class="hljs-operator">a</span>) : <span class="hljs-string">'appservice'</span> === b &amp;&amp; postMessageToWebPage(<span class="hljs-operator">a</span>)<div class="hljs-button signin" data-title="登录后复制"></div></code><ul class="pre-numbering" style><li style="color: rgb(153, 153, 153);">1</li></ul></pre><h4 id="ios">IOS</h4><p>通过 WKWebview的window.webkit.messageHandlers.NAME.postMessage实现微信navite代码里实现了两个handler消息处理器： <br><br>invokeHandler: 调用原生能力 <br><br>publishHandler: 消息分发 <br><br><img src="https://img-blog.csdn.net/20170326221355303?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title></p><h4 id="android">Android</h4><p>通过WeixinJSCore.invokeHanlder实现，这个WeixinJSCore是微信提供给JS调用的接口（native实现） <br><br>invokeHandler: 调用原生能力 <br><br>publishHandler: 消息分发</p><h2 id="微信组件"><a name="t12"></a>微信组件</h2><p>在WAWebview.js里有个对象叫exparser，它完整的实现小程序里的组件，看具体的实现方式，思路上跟w3c的web components规范神似，但是具体实现上是不一样的，我们使用的所有组件，都会被提前注册好，在Webview里渲染的时候进行替换组装。 <br><br>exparser有个核心方法： <br><br>regiisterBehavior: 注册组件的一些基础行为，供组件继承 <br><br>registerElement：注册组件，跟我们交互接口主要是属性和事件</p><p><img src="https://img-blog.csdn.net/20170326221559961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title></p><p>组件触发事件（带上webviewID），调用WeixinJSBridge的接口，publish到native，然后native再分发到AppService层指定webviewID的Page注册事件处理方法。</p><h1 id="总结"><a name="t13"></a>总结</h1><p>小程序底层还是基于Webview来实现的，并没有发明创造新技术，整个框架体系，比较清晰和简单，基于Web规范，保证现有技能价值的最大化，只需了解框架规范即可使用已有Web技术进行开发。易于理解和开发。</p><p><strong>MSSM</strong>：对逻辑和UI进行了完全隔离，这个跟当前流行的react，agular，vue有本质的区别，小程序逻辑和UI完全运行在2个独立的Webview里面，而后面这几个框架还是运行在一个webview里面的，如果你想，还是可以直接操作dom对象，进行ui渲染的。</p><p><strong>组件机制</strong>：引入组件化机制，但是不完全基于组件开发，跟vue一样大部分UI还是模板化渲染，引入组件机制能更好的规范开发模式，也更方便升级和维护。</p><p></p><p><strong>多种节制</strong>：不能同时打开超过5个窗口，打包文件不能大于1M，dom对象不能大于16000个等，这些都是为了保证更好的体验。</p>          <br>          <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-258a4616f7.css" rel="stylesheet"><br>                  <p></p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>error about mathtype in word2016</title>
      <link href="/post/error-about-mathtype-in-word2016(1).html"/>
      <url>/post/error-about-mathtype-in-word2016(1).html</url>
      
        <content type="html"><![CDATA[<p>  前言：一不小心，不知为什么打开word的时候mathtype报错，报错的截图如下（话说为了它，我还故意复原了一下这个error！），之前没得空也就没理他，这两天有时间了当然得治治它咯！走你！</p><a id="more"></a><p>  <strong>截图在这里：</strong></p><p><img src="http://ww1.sinaimg.cn/large/007NJmHtly1g35mub5zwej30e606i3yi.jpg" div align="center" alt="word2016环境下mathtype报错的截图"></p><h2 id="下面进入正文"><a href="#下面进入正文" class="headerlink" title="下面进入正文"></a>下面进入正文</h2><ol><li><p>先说一下原因，比较简单，这个错误的根源就是”word2016的加载项里少了一个mathtype必需的文件MathPage.wll“，这个文件在mathtype的安装位置下，以我的电脑为例，可以在<code>D:\Mathtype6.9d\MathPage\64</code>中找到它，这个安装位置不是固定的，是每个人的电脑而定不过可以借鉴一下这个地址格式!</p></li><li><p>上刑具，哦，不是，上方案！根据如下两篇百度知道文章<a href="https://jingyan.baidu.com/article/6079ad0ebc93bf28ff86db03.html" target="_blank" rel="noopener">第一篇、该文章不适用但可借鉴</a>，<a href="https://jingyan.baidu.com/article/915fc414c907ef51394b201f.html" target="_blank" rel="noopener">第二篇、解决关键</a>,再经过自己一番测试，结论如下，将第一步中找到的文件复制到<code>C:\Software\Office\Office16</code>然后重启word即可解决该问题，弹窗再也没有了！Ps：第二步中的地址可以在word里的”加载项“设置页面里找到！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word2016&amp;error-solve </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10环境下配置hexo博客(2)</title>
      <link href="/post/win10-hexo-install-set-2.html"/>
      <url>/post/win10-hexo-install-set-2.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> grocery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo&amp;win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>post自动生成格式的测试样例</title>
      <link href="/post/test%20of%20post.md.html"/>
      <url>/post/test%20of%20post.md.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10环境下配置hexo博客(1)</title>
      <link href="/post/win10-hexo-install-set-1.html"/>
      <url>/post/win10-hexo-install-set-1.html</url>
      
        <content type="html"><![CDATA[<p>  安装环境为win10-1809版本，主要完成了hexo博客的安装、更换主题为maupassant、配置gitalk评论系统、<br>设置网站menu和旁边控件widget、设置永久链接（未使用插件）、实现front-matter的自动设置等工作！</p><a id="more"></a><h1 id="一、windows环境下hexo博客的部署"><a href="#一、windows环境下hexo博客的部署" class="headerlink" title="一、windows环境下hexo博客的部署"></a>一、windows环境下hexo博客的部署</h1><p>​  配置环境属于机械式的，找到教程刷刷就完了，这是第二次部署了，结果因为之前没有留好标记，搞得第二回又是一通chrome！很烦！<br>  所以现在就把这一回的东西都mark在这！同时，立个flag, 这一回我要好好经营我这个博客，起码得两天一更！</p><p>  首先就找hexo官网咯! <a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">文档</a>很详细，小白上手的话还要参照一下其他教程如：<a href="https://blog.csdn.net/u011148116/article/details/52274773#commentBox" target="_blank" rel="noopener">前期安装教程</a>, 以及<a href="https://blog.csdn.net/wsmrzx/article/details/81475866#3_198" target="_blank" rel="noopener">github部署教程</a>的配置！，第二个链接更为详细，推荐！</p><h3 id="总结如下："><a href="#总结如下：" class="headerlink" title="总结如下："></a>总结如下：</h3><ol><li><p>安装git和node.js，做好git的相应配置（node.js我没动！）</p></li><li><p>npm install -g hexo-cli 命令安装hexo！推荐在shell中切换到blog的本地目录之后再操作，npm可以理解<br>成一个模块or扩展管理器，模块安装位置似乎默认为当前文件夹！</p></li><li><p>切换到新建的blog（本地目录）文件夹，然后使用下面的命令：</p><p> hexo init<br> npm install</p><p>也可以使用hexo init &lt;folder’s name&gt;命令来新建一个文件再cd进入在文件然后再使用上面第二条命令！</p></li><li><p>保持当前工作目录为blog，运行hexo server命令后打开<a href="http://localhost:4000/" target="_blank" rel="noopener">本地端口网址</a> 查看效果，我一般用这种方法来测试效果!</p></li><li><p>部署到github上！</p><p>这一步需要先在github上创建一个新的仓库，名字格式有要求，须为username.github.io格式！，然后进行ssh设置并更改_config.yml文件，具体更改为在type子项后键入git，在repo子项后输入自己github仓库的地址（形如<a href="https://github.com/username/username.github.io.git），">https://github.com/username/username.github.io.git），</a> 在branch子项后加上master即可，注意冒号后面要留空格（这是yml文件的格式要求）！之后在powershell中敲入 <code>hexo generate(=hexo g), hexo deploy(= hexo d)</code> 命令，稍等一下之后打开<a href="https://Lidongde.github.io" target="_blank" rel="noopener">自己博客的网址</a>，注意更改username为自己的用户名，如果看到网页上的东西和第四步中的内容一样就OK啦！</p></li></ol><p><em>repo子项在某些教程中也可以使用</em><a href="mailto:`git@github.com">`git@github.com</a>:username/username.github.io`的形式（我用了这个），上面那种格式我没有测试，望知悉！</p><h3 id="碰到的几个错误："><a href="#碰到的几个错误：" class="headerlink" title="碰到的几个错误："></a>碰到的几个错误：</h3><p>1、部署到github时发现报错‘<strong>ERROR Deployer not found: github</strong>’，解决方法参考了<a href="https://www.jianshu.com/p/5c6c6cf325cd" target="_blank" rel="noopener">这篇文章</a></p><p>  总结一下呢，就是缺了一个必要的插件：hexo-deployer-git; 解决方法也很简单：<code>npm install hexo-deployer-git --save</code> 命令即可，注意需要在第五步之前操作，这个坑是出现在第一个教程链接里，里面没说明，但第二个教程注明了！</p><h3 id="markdown软件的选择"><a href="#markdown软件的选择" class="headerlink" title="markdown软件的选择"></a>markdown软件的选择</h3><p>  之前有使用过markdownpad，后来重装系统后到现在才重新设置hexo博客，typora可以选择主题，所以就换成了该软件，不过主题好像只在typora中有效，网页端效果还是默认的！猜测要达成主题一致的效果需要改动hexo的配置文件！</p><p>  发现typora很是奇怪，用它生成的一个markdown文档始终不能部署deploy成功，更换软件查看源文档之后，我推测这应该属于软件本身和hexo的兼容问题，没得法子，又换成了markdownpad，虽然UI上不及typora但功能上却胜过它！</p><p>  这里贴一个markdownpad2的注册码吧，软件需要注册不过嘛，嘿嘿！<a href="https://www.jianshu.com/p/9e5cd946696d" target="_blank" rel="noopener">MarkdownPad2.5注册码</a></p><h3 id="更换成maupassant主题"><a href="#更换成maupassant主题" class="headerlink" title="更换成maupassant主题"></a>更换成maupassant主题</h3><p>  一番百度之后，找到了一个很对自己胃口的主题也就是<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">maupassant</a>，主题是大佬二次开发的，作者的博客里面介绍得很详细，从安装到设置都很详细！我就不再赘述了，详情参照链接！</p><h1 id="二、博客的优化以及调整"><a href="#二、博客的优化以及调整" class="headerlink" title="二、博客的优化以及调整"></a>二、博客的优化以及调整</h1><ol><li><p>首先呢，根据主题（我使用的是maupassant！）的说明，默认显示的摘要是文档的第一段，几乎绝大多数情况下产生的摘要都很凌乱，更别提能够帮助掌握文章的主旨与脉络咯！所以，摘要一定得自己亲力亲为！</p><p>设置摘要有两种方式，第一种，直接在front-matter中插入一段description，如下所示：</p><hr><p> xxx</p><h2 id="description-testing"><a href="#description-testing" class="headerlink" title=" description: testing"></a> description: testing</h2><p>第二种方法就是在front-matter后面写一段文字，然后加上<br>如下代码<code>&lt;!--more--&gt;</code>即可，这样处于front-matter和该行代码中间的部分就是description了！</p><p>比较两种方法，经过实际操作之后，墙裂推荐第二种，因为摘要一般都有好几行，而front-matter并不支持代码换行输入（我不知道），直接敲几行的description的话在博客generate和deploy环节会报错！综上，老实用第二种方法吧！别跳进第一个方法的坑了！powershell的报错示意图如下:</p></li></ol><ol start="2"><li>maupassant默认的界面需要优化一下，主要操作是去掉rss，设置about项目，设置时有参考<a href="https://blog.csdn.net/ganzhilin520/article/details/79047249" target="_blank" rel="noopener">这篇文章</a>，我自己做了相应的改进，总结如下：</li></ol><blockquote><ol><li><p>hexo new page about</p></li><li><p>在主题的config.yml文件中修改，备注掉rss项，添加自定义项！自定义项待测试！</p></li><li><p>在hexo博客根目录下的/source/about中可以发现index.md文件，做相应修改即可实现about界面的自定义！</p></li></ol></blockquote><blockquote><p>maupassant默认设置为首页上方有“首页、归档、关于、订阅“四个栏目（menu），可以自己订制menu！关于设置menu中文显示、条目目录、’post自动生成格式的修改‘的技巧可以参考<a href="https://www.zhihu.com/question/33324071" target="_blank" rel="noopener">本文</a>，在引用的这篇文章中使用的主题并不是maupassant，所以<code>hexo new page grocery&lt;参考而已&gt;</code>命令之后还需要自己手动配置/source/grocery/index.md文件，否则的话点击之后出来的页面只是一片空白，自己不懂这一方面，所以要深度自定义的话还得留待日后！大致看了一下，我想做的”杂项“menu可以参考自带的归档文件，先mark一下！</p></blockquote><ol start="3"><li>博客中添加图片、音乐、视频素材！一篇文章或者报告内容质量是至高准则，但版面的美观简练也不容忽视，有些时候多媒体资料的表现力是无法为文字所替代的！</li></ol><p><em>主要目标：</em> 图片大小可以自己定义、图片能够设置居中等格式、图片上传方便有序；视频可以调整播放进度条、视频宽高及居中等设置、可以点击重新播放及记忆播放进度；音乐与视频近似！</p><p>1)根据这篇<a href="https://blog.csdn.net/qq_35451572/article/details/79443467" target="_blank" rel="noopener">文章</a>，设置图片居左/居中/居右的方法为：</p><pre><code>&lt;div align=center&gt;![这里写图片描述](http:...)  -居中&lt;div align=right&gt;![这里写图片描述](http:...)  -居右[这里写图片描述](http:...)             -默认为居左</code></pre><p>  <em>这里以一张图片为例，图源为bing搜索！</em></p><pre><code>居左:&lt;img src=&quot;http://www.wuxubj.cn/images/avatar.jpg&quot; width = &quot;100&quot; height = &quot;100&quot; div align=left alt=&quot;markdown图片插入的最佳方式&quot; /&gt;</code></pre><p>居中：<br><img src="http://www.wuxubj.cn/images/avatar.jpg" width="100" height="100" div align="center" alt="markdown图片插入的最佳方式"></p><pre><code>居右：&lt;img src=&quot;http://www.wuxubj.cn/images/avatar.jpg&quot; width = &quot;100&quot; height = &quot;100&quot; div align=right alt=&quot;markdown图片插入的最佳方式&quot; /&gt;</code></pre><p>个人最为推荐的方式是采用html图片嵌入的方法，具体的html语法可以参考<a href="http://www.adminwang.com/html/33.html" target="_blank" rel="noopener">这里</a>，实际上写markdown文档的话只需要记忆上面的例子即可！图片的提示文字无法固定在图片正下方！设置方法留待验证！另外，经过测试，markdownpad自带的图传已经失效，不知是软件未更新还是什么的原因。<img src="https://i.imgur.com/3vodcS0.png" alt="markdownpad自带的图床失效了"></p><p>2)在hexo博客中插入音频和视频的方法：第一种就是采用<a href="https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485031&amp;idx=3&amp;sn=cb03072a0a04e2c20acebcce8dbe1ca0&amp;chksm=fcf08a58cb87034e433aec9d98e6cd4a4672af83a397affb2dd807d06bb1c440c73fd349fba5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">html内嵌代码</a>，原理几乎和插入图片一致，都是html的神奇用法，效果可以参见下方的B站视频；第二种即使用<a href="https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485106&amp;idx=3&amp;sn=50a8681007d7b82a29c92e70110fff1d&amp;chksm=fcf08a8dcb87039b272837b9db33f54db6bed8f3401f7d65f6caf9cec28edb1119fdfee82d41&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">相关插件</a></p><p>B站视频html方式插入的代码如下：</p><pre><code>&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=9584304&amp;cid=15841366&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</code></pre><p>结果在这里(没想到吧，是瞎看哦!)：</p><blockquote><iframe src="//player.bilibili.com/player.html?aid=9584304&cid=15841366&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></blockquote>]]></content>
      
      
      <categories>
          
          <category> grocery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo&amp;win10 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
